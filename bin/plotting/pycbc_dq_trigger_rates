#!/usr/bin/env python
""" Bin triggers by their idq logl and calculate trigger rates in each bin
"""
import logging
import argparse
import pycbc
import h5py
from matplotlib import use; use('Agg')
from matplotlib import pyplot
from pycbc.version import git_verbose_msg as version

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('--version', action='version', version=version)
parser.add_argument('--verbose', action="store_true")
parser.add_argument("--ifo", type=str,required=True)
parser.add_argument("--dq-file", required=True)
parser.add_argument('--log-y', action='store_true', default=False)
parser.add_argument("--output-file", required=True)
args = parser.parse_args()

pycbc.init_logging(args.verbose)

ifo = args.ifo

f = h5py.File(args.dq_file, 'r')

xvals = f['%s/times'%ifo][:]
yvals = f['%s/log_likelihood'%ifo][:]
dq_name = f.attrs['dq_type'] 

xmax = max(xvals) + 0.2 * (max(xvals)-min(xvals))
xmin = min(xvals) + 0.2 * (max(xvals)-min(xvals)

ymax = 1.2 * max(yvals)

# create a figure to add a histogram
fig = pyplot.figure(0)

pyplot.scatter(xvals,yvals)

# format plot
ax = pyplot.gca()
if args.log_y:
    ax.set_yscale('log')
pyplot.ylabel('Relative trigger rate')
pyplot.xlabel('Time (s)')
pyplot.ylim(ymin=0,ymax=ymax)
pyplot.xlim(xmin=xmin,xmax=xmax)

# add a grid to the plot
pyplot.grid()

# add meta data and save figure
pycbc.results.save_fig_with_metadata(fig, args.output_file,
                title = '%s: %s log likelihood versus time' % (ifo, dq_name),
                caption = 'Log likelihood verus time of a DQ product',
                cmd = ' '.join(sys.argv))

